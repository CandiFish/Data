{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "“RG_Only_Crunchbase_analysis.ipynb”的副本",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CandiFish/Data/blob/main/INSY695\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YFhaK27oiTXW",
        "outputId": "f7d55458-a2bc-4d99-d0d7-237dc0bae0a6"
      },
      "source": [
        "\n",
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")\n",
        "\n",
        "%cd 'drive/My Drive/bulk_export/'\n",
        "import pandas as pd\n",
        "import numpy as np\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "/content/drive/My Drive/bulk_export\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RgVO3BnujOe_"
      },
      "source": [
        "### Import Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YO5RXNZyjCOI"
      },
      "source": [
        "#orgs=pd.read_csv(\"organizations.csv\")\n",
        "#orgs= orgs[orgs['roles'].str.contains('investor')==False].reset_index(drop=True)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 479
        },
        "id": "G__XX9h_THSj",
        "outputId": "d7fe90f3-2704-4584-ed49-c35555e61b9f"
      },
      "source": [
        "orgs.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>uuid</th>\n",
              "      <th>name</th>\n",
              "      <th>type</th>\n",
              "      <th>permalink</th>\n",
              "      <th>cb_url</th>\n",
              "      <th>rank</th>\n",
              "      <th>created_at</th>\n",
              "      <th>updated_at</th>\n",
              "      <th>legal_name</th>\n",
              "      <th>roles</th>\n",
              "      <th>domain</th>\n",
              "      <th>homepage_url</th>\n",
              "      <th>country_code</th>\n",
              "      <th>state_code</th>\n",
              "      <th>region</th>\n",
              "      <th>city</th>\n",
              "      <th>address</th>\n",
              "      <th>postal_code</th>\n",
              "      <th>status</th>\n",
              "      <th>short_description</th>\n",
              "      <th>category_list</th>\n",
              "      <th>category_groups_list</th>\n",
              "      <th>num_funding_rounds</th>\n",
              "      <th>total_funding_usd</th>\n",
              "      <th>total_funding</th>\n",
              "      <th>total_funding_currency_code</th>\n",
              "      <th>founded_on</th>\n",
              "      <th>last_funding_on</th>\n",
              "      <th>closed_on</th>\n",
              "      <th>employee_count</th>\n",
              "      <th>email</th>\n",
              "      <th>phone</th>\n",
              "      <th>facebook_url</th>\n",
              "      <th>linkedin_url</th>\n",
              "      <th>twitter_url</th>\n",
              "      <th>logo_url</th>\n",
              "      <th>alias1</th>\n",
              "      <th>alias2</th>\n",
              "      <th>alias3</th>\n",
              "      <th>primary_role</th>\n",
              "      <th>num_exits</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>e1393508-30ea-8a36-3f96-dd3226033abd</td>\n",
              "      <td>Wetpaint</td>\n",
              "      <td>organization</td>\n",
              "      <td>wetpaint</td>\n",
              "      <td>https://www.crunchbase.com/organization/wetpaint</td>\n",
              "      <td>134652.0</td>\n",
              "      <td>2007-05-25 13:51:27</td>\n",
              "      <td>2019-06-24 22:19:25</td>\n",
              "      <td>NaN</td>\n",
              "      <td>company</td>\n",
              "      <td>wetpaint.com</td>\n",
              "      <td>http://www.wetpaint.com/</td>\n",
              "      <td>USA</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York</td>\n",
              "      <td>902 Broadway 11th Floor New</td>\n",
              "      <td>10010</td>\n",
              "      <td>acquired</td>\n",
              "      <td>Wetpaint offers an online social publishing pl...</td>\n",
              "      <td>Publishing,Social Media,Social Media Management</td>\n",
              "      <td>Content and Publishing,Internet Services,Media...</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.975000e+07</td>\n",
              "      <td>3.975000e+07</td>\n",
              "      <td>USD</td>\n",
              "      <td>2005-06-01</td>\n",
              "      <td>2008-05-19</td>\n",
              "      <td>NaN</td>\n",
              "      <td>51-100</td>\n",
              "      <td>info@wetpaint.com</td>\n",
              "      <td>206-859-6300</td>\n",
              "      <td>https://www.facebook.com/Wetpaint</td>\n",
              "      <td>https://www.linkedin.com/company/wetpaint</td>\n",
              "      <td>https://twitter.com/wetpainttv</td>\n",
              "      <td>https://res.cloudinary.com/crunchbase-producti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>company</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>bf4d7b0e-b34d-2fd8-d292-6049c4f7efc7</td>\n",
              "      <td>Zoho</td>\n",
              "      <td>organization</td>\n",
              "      <td>zoho</td>\n",
              "      <td>https://www.crunchbase.com/organization/zoho</td>\n",
              "      <td>6973.0</td>\n",
              "      <td>2007-05-26 02:30:28</td>\n",
              "      <td>2018-10-27 00:29:49</td>\n",
              "      <td>NaN</td>\n",
              "      <td>investor,company</td>\n",
              "      <td>zoho.com</td>\n",
              "      <td>https://www.zoho.com/</td>\n",
              "      <td>USA</td>\n",
              "      <td>CA</td>\n",
              "      <td>California</td>\n",
              "      <td>Pleasanton</td>\n",
              "      <td>4141 Hacienda Drive</td>\n",
              "      <td>94588</td>\n",
              "      <td>operating</td>\n",
              "      <td>Zoho offers a suite of business, collaboration...</td>\n",
              "      <td>Cloud Computing,Collaboration,CRM,Developer To...</td>\n",
              "      <td>Administrative Services,Information Technology...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1996-09-15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1001-5000</td>\n",
              "      <td>info@zohocorp.com</td>\n",
              "      <td>NaN</td>\n",
              "      <td>http://www.facebook.com/zoho</td>\n",
              "      <td>http://www.linkedin.com/company/zoho-corporati...</td>\n",
              "      <td>http://twitter.com/zoho</td>\n",
              "      <td>https://res.cloudinary.com/crunchbase-producti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>company</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5f2b40b8-d1b3-d323-d81a-b7a8e89553d0</td>\n",
              "      <td>Digg</td>\n",
              "      <td>organization</td>\n",
              "      <td>digg</td>\n",
              "      <td>https://www.crunchbase.com/organization/digg</td>\n",
              "      <td>8557.0</td>\n",
              "      <td>2007-05-26 03:03:23</td>\n",
              "      <td>2018-12-10 10:09:14</td>\n",
              "      <td>Digg Holdings, LLC</td>\n",
              "      <td>company</td>\n",
              "      <td>digg.com</td>\n",
              "      <td>http://www.digg.com</td>\n",
              "      <td>USA</td>\n",
              "      <td>NY</td>\n",
              "      <td>New York</td>\n",
              "      <td>New York</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>acquired</td>\n",
              "      <td>Digg Inc. operates a website that enables its ...</td>\n",
              "      <td>Internet,Social Media,Social Network</td>\n",
              "      <td>Internet Services,Media and Entertainment</td>\n",
              "      <td>6.0</td>\n",
              "      <td>4.900000e+07</td>\n",
              "      <td>4.900000e+07</td>\n",
              "      <td>USD</td>\n",
              "      <td>2004-10-11</td>\n",
              "      <td>2016-09-13</td>\n",
              "      <td>NaN</td>\n",
              "      <td>51-100</td>\n",
              "      <td>feedback@digg.com</td>\n",
              "      <td>877-342-7222</td>\n",
              "      <td>http://www.facebook.com/digg</td>\n",
              "      <td>http://www.linkedin.com/company/digg</td>\n",
              "      <td>http://twitter.com/digg</td>\n",
              "      <td>https://res.cloudinary.com/crunchbase-producti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>company</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>f4d5ab44-058b-298b-ea81-380e6e9a8eec</td>\n",
              "      <td>Omidyar Network</td>\n",
              "      <td>organization</td>\n",
              "      <td>omidyar-network</td>\n",
              "      <td>https://www.crunchbase.com/organization/omidya...</td>\n",
              "      <td>5425.0</td>\n",
              "      <td>2007-05-26 03:21:34</td>\n",
              "      <td>2019-06-19 12:17:48</td>\n",
              "      <td>NaN</td>\n",
              "      <td>investor</td>\n",
              "      <td>omidyar.com</td>\n",
              "      <td>http://www.omidyar.com</td>\n",
              "      <td>USA</td>\n",
              "      <td>CA</td>\n",
              "      <td>California</td>\n",
              "      <td>Redwood City</td>\n",
              "      <td>1991 Broadway Suite 200</td>\n",
              "      <td>94063</td>\n",
              "      <td>operating</td>\n",
              "      <td>Omidyar Network is an investment firm.</td>\n",
              "      <td>Enterprise Software,Financial Services,Venture...</td>\n",
              "      <td>Financial Services,Lending and Investments,Sof...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2004-01-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>101-250</td>\n",
              "      <td>info@omidyar.com</td>\n",
              "      <td>650.482.2500</td>\n",
              "      <td>http://www.facebook.com/OmidyarNetwork</td>\n",
              "      <td>http://www.linkedin.com/company/22806</td>\n",
              "      <td>http://twitter.com/OmidyarNetwork</td>\n",
              "      <td>https://res.cloudinary.com/crunchbase-producti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>investor</td>\n",
              "      <td>37.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>df662812-7f97-0b43-9d3e-12f64f504fbb</td>\n",
              "      <td>Facebook</td>\n",
              "      <td>organization</td>\n",
              "      <td>facebook</td>\n",
              "      <td>https://www.crunchbase.com/organization/facebook</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2007-05-26 04:22:15</td>\n",
              "      <td>2020-10-21 13:53:15</td>\n",
              "      <td>Facebook, Inc.</td>\n",
              "      <td>investor,company</td>\n",
              "      <td>facebook.com</td>\n",
              "      <td>http://www.facebook.com</td>\n",
              "      <td>USA</td>\n",
              "      <td>CA</td>\n",
              "      <td>California</td>\n",
              "      <td>Menlo Park</td>\n",
              "      <td>1 Hacker Way</td>\n",
              "      <td>94025</td>\n",
              "      <td>ipo</td>\n",
              "      <td>Facebook is an online social networking servic...</td>\n",
              "      <td>Mobile Apps,Social,Social Media,Social Network...</td>\n",
              "      <td>Apps,Community and Lifestyle,Content and Publi...</td>\n",
              "      <td>17.0</td>\n",
              "      <td>1.612282e+10</td>\n",
              "      <td>1.612282e+10</td>\n",
              "      <td>USD</td>\n",
              "      <td>2004-02-04</td>\n",
              "      <td>2014-10-17</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10000+</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>https://www.facebook.com/facebook/</td>\n",
              "      <td>http://www.linkedin.com/company/facebook</td>\n",
              "      <td>https://twitter.com/facebook</td>\n",
              "      <td>https://res.cloudinary.com/crunchbase-producti...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>company</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                   uuid  ... num_exits\n",
              "0  e1393508-30ea-8a36-3f96-dd3226033abd  ...       NaN\n",
              "1  bf4d7b0e-b34d-2fd8-d292-6049c4f7efc7  ...       1.0\n",
              "2  5f2b40b8-d1b3-d323-d81a-b7a8e89553d0  ...       NaN\n",
              "3  f4d5ab44-058b-298b-ea81-380e6e9a8eec  ...      37.0\n",
              "4  df662812-7f97-0b43-9d3e-12f64f504fbb  ...       NaN\n",
              "\n",
              "[5 rows x 41 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FMjKBaUPm_TW"
      },
      "source": [
        "### Filtering and deleting columns"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UALFFvVAnBA2"
      },
      "source": [
        "# Richard\n",
        "#orgs= orgs[orgs['roles'].str.contains('investor')==False]\n",
        "#orgs['founded_on']=[ 0 if str(date) == 'nan' else date for date in orgs['founded_on']]\n",
        "#orgs['founded_on']= [0 if int(str(date).split(\"-\")[0]) < 1900 else date for date in orgs['founded_on']]\n",
        "#orgs= orgs[(orgs['founded_on'] != \"1534-01-01\") & (orgs['founded_on']!='1472-01-01')]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-3g_AgxYm2qJ"
      },
      "source": [
        "### Convert Founded date to days"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WCCpNr8tm5Ob"
      },
      "source": [
        "# Ang (founded_on)\n",
        "# 2019-09-20 -> 365 days\n",
        "# 2019-09-29 -> 2019,09,29\n",
        "#import datetime\n",
        "\n",
        "\n",
        "# orgs[\"founded_on\"]=  pd.to_datetime(orgs[\"founded_on\"], format='%Y-%m-%d')\n",
        "# orgs[\"founded_on_year\"] = pd.DatetimeIndex(orgs[\"founded_on\"]).year\n",
        "# orgs[\"founded_on_month\"] = pd.DatetimeIndex(orgs[\"founded_on\"]).month\n",
        "# orgs[\"founded_on_day\"] = pd.DatetimeIndex(orgs[\"founded_on\"]).day"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hUD-MKGmbgKX",
        "outputId": "d491a2bb-db99-44eb-be9e-6702a86cbcce"
      },
      "source": [
        "# orgs.shape"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1164956, 44)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ve9WHmWBmubB"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "guaL1UNbjNiu",
        "outputId": "074a61c3-58f0-43a5-9d8c-faa301ef17b8"
      },
      "source": [
        "# orgs['status'].hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f310e572588>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E9s_Wc7xmlbS"
      },
      "source": [
        "### One hot Encoding for Categorical"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AnZ-rtlPmnu4"
      },
      "source": [
        " # convert categorical columns to one hot encodings\n",
        " # Yanda \n",
        "def convertcategorical_onehot(orgs,column=\"category_list\"):\n",
        "  orgs_test = orgs\n",
        "  orgs_test = orgs_test[orgs_test[column].notna()]\n",
        "  orgs_test= orgs_test.reset_index()\n",
        "  full_string = \"\"\n",
        "  for index, row in orgs_test.iterrows():\n",
        "    full_string += row[column] +\",\"\n",
        "  full_string = full_string[:-1]\n",
        "  cl = full_string.split(\",\")\n",
        "  cl = list(set(cl))\n",
        "  indexes = list(range(0, len(orgs_test)))\n",
        "  df = pd.DataFrame(0,columns=cl,index =indexes) \n",
        "  for index,row in orgs_test.iterrows():\n",
        "    category_list = row[column].split(\",\")\n",
        "    for x in category_list:\n",
        "      df.at[index, x] = 1\n",
        "  orgs_test = pd.concat([orgs_test, df], axis=1)\n",
        "  dummycolumns= df.columns\n",
        "  return(orgs_test,dummycolumns)\n",
        "\n",
        "# orgs,dummycolumns=convertcategorical_onehot(orgs.copy(),'category_groups_list')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P_IjPF4zYiZO"
      },
      "source": [
        " # convert categorical columns to one hot encodings\r\n",
        " # Yanda\r\n",
        "orgs = orgs[0:10000] \r\n",
        "orgs = orgs[orgs[\"category_list\"].notna()]\r\n",
        "orgs= orgs.reset_index()\r\n",
        "full_string = \"\"\r\n",
        "cat_dic ={}\r\n",
        "for index, row in orgs.iterrows():\r\n",
        "  category_list = row[\"category_list\"].split(\",\")\r\n",
        "  for x in category_list:\r\n",
        "    if x not in cat_dic:\r\n",
        "      cat_dic.update({x: 1})\r\n",
        "    else:\r\n",
        "      cat_dic[x] += 1\r\n",
        "cat_dic = sorted(cat_dic.items(), key=lambda x: x[1], reverse=True)\r\n",
        "\r\n",
        "count = 0\r\n",
        "cl = []\r\n",
        "for key, value in cat_dic:\r\n",
        "  cl.append(key)\r\n",
        "  count += 1\r\n",
        "  if count ==50:\r\n",
        "    break;\r\n",
        "indexes = list(range(0, len(orgs_test)))\r\n",
        "df = pd.DataFrame(0,columns=cl,index =indexes)\r\n",
        "for index,row in orgs_test.iterrows():\r\n",
        "  category_list = row[\"category_list\"].split(\",\")\r\n",
        "  for x in category_list:\r\n",
        "    if x in cl:\r\n",
        "      df.at[index, x] = 1\r\n",
        "orgs_test = pd.concat([orgs, df], axis=1)\r\n",
        "orgs_test"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rAFTWtnpddyf"
      },
      "source": [
        "import pickle\n",
        "# pickle.dump( {'data':orgs,'dummies':dummycolumns}, open( \"filtered_orgs.p\", \"wb\" ) )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yrmHWMn-d7AO"
      },
      "source": [
        "pickle_res = pickle.load( open( \"filtered_orgs.p\", \"rb\" ) )"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1BhYAn34eBy8"
      },
      "source": [
        "orgs,dummycolumns = pickle_res['data'],pickle_res['dummies']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tHQhqA8Doq1o"
      },
      "source": [
        "orgs.to_csv(\"filtered_orgs.csv\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wuhdjNG5mROP"
      },
      "source": [
        "### Exploration"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nll4CskxmSqP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "4636ce55-c0dc-4abb-d748-904326af75d9"
      },
      "source": [
        "# Everyone\n",
        "\n",
        "orgs['status'].hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f2e50666e80>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEDCAYAAAAlRP8qAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATbUlEQVR4nO3df7DldX3f8efL5aeLJSaLdyyLWRJXLWFTjXfAH1WvCcmANpA0xkKISgbdcRo0rYvtdpKhlEw7MR1SS4OanYRi1LiCo3TrUolGriREFBAFdhG6hY0syURFpL1Qg2ve/eP73Xi82b3n7L3n3L372edjZud8v5/v53y+n3s+5/va7/2c8/3eVBWSpMPf0w51ByRJ42GgS1IjDHRJaoSBLkmNMNAlqREGuiQ14pAGepJrknwtyb0j1n99kp1JdiT5o0n3T5IOJzmU30NP8kpgDvjDqjp9SN31wHXAT1bVY0meVVVfW45+StLh4JCeoVfVLcA3B8uS/GiSTya5M8mfJnlBv+ktwNVV9Vj/XMNckgasxDn0LcDbqurFwKXAe/ry5wHPS3JrktuSnH3IeihJK9BRh7oDg5KcALwMuD7JvuJj+8ejgPXADLAWuCXJhqr61nL3U5JWohUV6HS/MXyrql64n217gM9X1XeAh5I8QBfwty9nByVppVpRUy5V9X/owvoXAdL5x/3mG+jOzkmyhm4K5sFD0U9JWokO9dcWPwx8Dnh+kj1JLgYuBC5O8mVgB3BeX/0m4NEkO4GbgXdW1aOHot+StBId0q8tSpLGZ+gZ+rCLf/ppkauS7Epyd5KfGH83JUnDjPKh6LXA7wJ/eIDt59B9OLkeOBN4b/+4oDVr1tS6detG6uR8TzzxBKtXr17UczU5jsvK45isTEsZlzvvvPMbVXXS/rYNDfSquiXJugWqnEd3pWcBtyX5gSTPrqq/WqjddevWcccddwzb/X7Nzs4yMzOzqOdqchyXlccxWZmWMi5J/uJA28bxtcWTgYcH1vf0ZX8v0JNsBDYCTE1NMTs7u6gdzs3NLfq5mhzHZeVxTFamSY3Lsn4Pvaq20F0JyvT0dC32fyjPOlYmx2XlcUxWpkmNyzi+tvgIcMrA+tq+TJK0jMYR6NuAN/bfdnkJ8Piw+XNJ0vgNnXLpL/6ZAdYk2QP8O+BogKp6H3Aj8BpgF/Ak8CuT6qwk6cBG+ZbLBUO2F/CrY+uRJGlRVtS9XCRJi2egS1IjDHRJasRKux+6dERbt3n7WNvbtGEvF43Q5u7feu1Y96tDwzN0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1IiRAj3J2UnuT7Iryeb9bH9OkpuT3JXk7iSvGX9XJUkLGRroSVYBVwPnAKcBFyQ5bV613wCuq6oXAecD7xl3RyVJCxvlDP0MYFdVPVhVTwFbgfPm1SngH/TLJwJ/Ob4uSpJGkapauELyOuDsqnpzv/4G4MyqumSgzrOBPwaeCawGzqqqO/fT1kZgI8DU1NSLt27duqhOz83NccIJJyzquZocx2Xp7nnk8bG2N3U8/PX/G15vw8knjnW/WthSjpVXv/rVd1bV9P62HbWkXn3PBcC1VXVlkpcCH0hyelX97WClqtoCbAGYnp6umZmZRe1sdnaWxT5Xk+O4LN1Fm7ePtb1NG/Zy5T3DD/PdF86Mdb9a2KSOlVGmXB4BThlYX9uXDboYuA6gqj4HHAesGUcHJUmjGSXQbwfWJzk1yTF0H3pum1fnq8BPAST5R3SB/vVxdlSStLChgV5Ve4FLgJuA++i+zbIjyRVJzu2rbQLekuTLwIeBi2rY5LwkaaxGmkOvqhuBG+eVXTawvBN4+Xi7Jkk6GF4pKkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRIwV6krOT3J9kV5LNB6jz+iQ7k+xI8kfj7aYkaZijhlVIsgq4GvhpYA9we5JtVbVzoM564N8CL6+qx5I8a1IdliTt3yhn6GcAu6rqwap6CtgKnDevzluAq6vqMYCq+tp4uylJGmboGTpwMvDwwPoe4Mx5dZ4HkORWYBVweVV9cn5DSTYCGwGmpqaYnZ1dRJdhbm5u0c/V5DguS7dpw96xtjd1/GhtOm7La1LHyiiBPmo764EZYC1wS5INVfWtwUpVtQXYAjA9PV0zMzOL2tns7CyLfa4mx3FZuos2bx9re5s27OXKe4Yf5rsvnBnrfrWwSR0ro0y5PAKcMrC+ti8btAfYVlXfqaqHgAfoAl6StExGCfTbgfVJTk1yDHA+sG1enRvozs5JsoZuCubBMfZTkjTE0ECvqr3AJcBNwH3AdVW1I8kVSc7tq90EPJpkJ3Az8M6qenRSnZYk/X0jzaFX1Y3AjfPKLhtYLuAd/T9J0iHglaKS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGjFSoCc5O8n9SXYl2bxAvV9IUkmmx9dFSdIohgZ6klXA1cA5wGnABUlO20+9ZwC/Bnx+3J2UJA03yhn6GcCuqnqwqp4CtgLn7afebwLvAr49xv5JkkZ01Ah1TgYeHljfA5w5WCHJTwCnVNX2JO88UENJNgIbAaamppidnT3oDgPMzc0t+rmaHMdl6TZt2DvW9qaOH61Nx215TepYGSXQF5TkacDvABcNq1tVW4AtANPT0zUzM7Oofc7OzrLY52pyHJelu2jz9rG2t2nDXq68Z/hhvvvCmbHuVwub1LEyypTLI8ApA+tr+7J9ngGcDswm2Q28BNjmB6OStLxGCfTbgfVJTk1yDHA+sG3fxqp6vKrWVNW6qloH3AacW1V3TKTHkqT9GhroVbUXuAS4CbgPuK6qdiS5Ism5k+6gJGk0I82hV9WNwI3zyi47QN2ZpXdLknSwvFJUkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpEQa6JDXCQJekRhjoktQIA12SGmGgS1IjDHRJaoSBLkmNMNAlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiNGCvQkZye5P8muJJv3s/0dSXYmuTvJnyT54fF3VZK0kKGBnmQVcDVwDnAacEGS0+ZVuwuYrqofBz4K/Pa4OypJWtgoZ+hnALuq6sGqegrYCpw3WKGqbq6qJ/vV24C14+2mJGmYUQL9ZODhgfU9fdmBXAz8z6V0SpJ08I4aZ2NJfhmYBl51gO0bgY0AU1NTzM7OLmo/c3Nzi36uJsdxWbpNG/aOtb2p40dr03FbXpM6VkYJ9EeAUwbW1/Zl3yfJWcCvA6+qqr/ZX0NVtQXYAjA9PV0zMzMH21+ge/Mt9rmaHMdl6S7avH2s7W3asJcr7xl+mO++cGas+9XCJnWsjDLlcjuwPsmpSY4Bzge2DVZI8iLg94Bzq+prY++lJGmooYFeVXuBS4CbgPuA66pqR5IrkpzbV/tPwAnA9Um+lGTbAZqTJE3ISHPoVXUjcOO8sssGls8ac78kSQfJK0UlqREGuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIaYaBLUiMMdElqhIEuSY0w0CWpESP9xaKV5p5HHh/7H9Md1e7feu0h2a8kDeMZuiQ1wkCXpEYY6JLUCANdkhphoEtSIwx0SWqEgS5JjTDQJakRBrokNcJAl6RGGOiS1AgDXZIacVjenEvLa92IN0LbtGHvWG+a5o3QpIPjGbokNcIzdElHpFF/85yEa89ePZF2PUOXpEYY6JLUiJECPcnZSe5PsivJ5v1sPzbJR/rtn0+ybtwdlSQtbGigJ1kFXA2cA5wGXJDktHnVLgYeq6rnAv8ZeNe4OypJWtgoZ+hnALuq6sGqegrYCpw3r855wPv75Y8CP5Uk4+umJGmYVNXCFZLXAWdX1Zv79TcAZ1bVJQN17u3r7OnX/3df5xvz2toIbOxXnw/cv8h+rwG+MbSWlpvjsvI4JivTUsblh6vqpP1tWNavLVbVFmDLUttJckdVTY+hSxojx2XlcUxWpkmNyyhTLo8Apwysr+3L9lsnyVHAicCj4+igJGk0owT67cD6JKcmOQY4H9g2r8424E398uuAz9SwuRxJ0lgNnXKpqr1JLgFuAlYB11TVjiRXAHdU1TbgD4APJNkFfJMu9CdpydM2mgjHZeVxTFamiYzL0A9FJUmHB68UlaRGGOiS1IjDPtCTXJHkrCU8fybJJ8bZp5YkuTzJpRNsfzaJX6tbRv17/mUD629N8sZD2acWJfnz5d7nYX/73Kq6bH/lSVZV1XeXuz/SSpDkqKrae4DNM8Ac8OcAVfW+5erXkaSqXja81ngtyxl6khuS3JlkR3+16L4bfn0xyZeT/Elf9kNJ/riv9/tJ/iLJmiTr+qtR97V3aZLL++Vr+6tZSbI7ybuSfBH4xSQ/k+Rz/X6uT3LCwL6/0tf7Z8vxGhwukrwxyd39uHxg3rYXJrmt3/7xJM/sy9+eZGdfvrUvW53kmiRfSHJXkvP68uOTbE1yX5KPA8cv+w+5AiV5R5J7+3//sn/PfyXJh/rX6qNJnt7XfXGSz/bH1E1Jnt2XzyZ5d5I7gF9L8rP9zfLuSvLpJFP9jfPeCvyrJF9K8orB38L6Nt7Vj9sDSV7Rlz89yXX9OH+8b9ffrBaQZK5/nElyS5Lt6W5y+L4kT+u3XZDknn7cl34PrKqa+D/gB/vH44F7gSngYeDUeduvAi7rl18LFN0lsuuAewfauxS4vF++Fnhdv7wb+Nf98hrgFmB1v/5vgMuA4/p9rwcCXAd8Yjleh5X+D/gx4AFgzb5xAS4HLu3X7wZe1S9fAby7X/5L4Nh++Qf6x/8I/PK+sr7d1cA76L76CvDjwF5g+lD/7If4dX8xcE//+pwA7ABe1L//X97XuaZ/3x9Nd2Z9Ul/+zwdez1ngPQPtPpPvfZPtzcCV/fLfjen89b6NffVeA3y6X74U+L1++XTHbaRxnesfZ4BvAz9C99XvT9Fdr/MPga8CJ9HNlnwG+Lml7HO5plzenuTn++VT6O7ncktVPQRQVd/st72S/oy5qrYneWwR+/pI//gSurtD3pruPmHHAJ8DXgA8VFX/CyDJB/ne/WWOdD8JXF/9PXiq6pv9a0eSE+nC+rN93fcD1/fLdwMfSnIDcENf9jPAuQPz78cBz6Eb46v69u9Ocvdkf6TDwj8BPl5VTwAk+RjwCuDhqrq1r/NB4O3AJ+kC9VP92KwC/mqgrY8MLK8FPtKfwR8DPDRifz7WP95JdzK1r4//BaCq7nXcDtoXqupBgCQfpns9vwPMVtXX+/IP0R0fNxywlSEmHuhJZoCzgJdW1ZNJZoEv0QXrqPby/dNDxy1Q94l9uwY+VVUXzOvPCw9ivxrNa+neiD8L/HqSDXSv/y9U1ffdgC3ehPNgzL9IpOhe1x1V9dIDPOeJgeX/CvxOVW3rj8PLR9zv3/SP36WBz9lWiP2N5dgtxxz6iXT3Sn8yyQvozpyPA16Z5FSAJD/Y170F+KW+7By6XxkB/hp4Vj/HfizwT0fY723Ay5M8t29vdZLnAV8B1iX50b7eBQdq4Aj0GbrPHn4Ivm9cqKrHgcf2zakCbwA+288FnlJVN9NNa51IN21wE/C29Ame5EX98wbH+HS6aZcj3Z8CP9fPU68Gfr4ve06SfcH9S8Cf0d2h9KR95UmOTvJjB2j3RL5336U3DZT/X+AZB9nHW4HX9/s8DdhwkM8/0p2R7vYpT6ObJvsz4AvAq9J9TriKLos+u1AjwyzH/76fBN6a5D66N+NtwNfppjk+1v+AXwN+Gvj3wIeT7KCbJ/wqQFV9J92tBr5A9wb9yrCdVtXXk1zUt3dsX/wbVfVAug9mtyd5ku7AOdg3d5Oqu6XDf6AL6u8Cd9F9LrHPm4D39R/OPQj8Ct2v/B/sp2QCXFVV30rym8C7gbv7MX6I7j/i9wL/rX8/3Ef3a/0Rraq+mORauvc3wO8Dj9EdL7+a5BpgJ/Deqnoq3ZcArupf86PoXucd+2n6cuD6furyM8Cpffn/AD6a7oPqt43YzfcA70+yk+742wE8flA/6JHtduB3gecCN9NNsf1tur8AdzPdsbO9qv77Unayoi/9T7Kb7oMX7+esI0r/bZRPVNXph7grwN/95bKjq+rb/W+3nwaeX90fvdEC+umuS6tqlJmFJXF+TNIong7cnORourPJf2GYrzwr+gxdkjS6w/7Sf0lSx0CXpEYY6JLUCANdkhphoEtSI/4/qK4q7Vj9xXcAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oLgPkNy0zszZ"
      },
      "source": [
        "# Possible columns\r\n",
        "# remove rank, closed_on, num_funding_rounds\r\n",
        "orgs_clean = orgs[['type','rank','created_at','updated_at', 'roles',\r\n",
        "       'country_code', 'state_code', 'region', 'city', \r\n",
        "       'status', 'short_description', 'category_list', \r\n",
        "       'category_groups_list', 'num_funding_rounds', 'total_funding_usd',\r\n",
        "       'total_funding', 'founded_on', \r\n",
        "       'last_funding_on', 'closed_on', 'employee_count',\r\n",
        "        'primary_role', 'num_exits']]\r\n",
        "\r\n",
        "# orgs_clean\r\n",
        "## drop id-like column\r\n",
        "## name, leagal_name, urls, domain, address, postal_code, email, phone, alias123\r\n",
        "\r\n",
        "## other possible drops\r\n",
        "## drop rows with closed_on == exact dates, num_exits, rank\r\n",
        "\r\n",
        "## colinearity \r\n",
        "## contry_code, state_code, region, city, total_funding_currency_code (dropped)\r\n",
        "## total_funding_usd, total_funding\r\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ooKlRIqi0vGk",
        "outputId": "f7179162-47f0-48bc-b8f1-0b3cbc708946"
      },
      "source": [
        "# count of null values for each column\r\n",
        "orgs_clean.isna().sum()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "type                          0\n",
              "rank                        143\n",
              "created_at                    0\n",
              "updated_at                    0\n",
              "roles                      9011\n",
              "country_code             187377\n",
              "state_code               768268\n",
              "region                   187377\n",
              "city                     187377\n",
              "status                        0\n",
              "short_description           120\n",
              "category_list             80260\n",
              "category_groups_list      80260\n",
              "num_funding_rounds      1049679\n",
              "total_funding_usd       1101630\n",
              "total_funding           1101630\n",
              "founded_on               265327\n",
              "last_funding_on         1049720\n",
              "closed_on               1229657\n",
              "employee_count                0\n",
              "primary_role                  0\n",
              "num_exits               1226334\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "k_EMAZArnKlM"
      },
      "source": [
        "### Feature engineering (convert numbers to categories)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "USgRzz4LnNLC"
      },
      "source": [
        "# Ariel"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "hS2a0PTw89A8",
        "outputId": "d37ec0e6-3e0b-4b5c-d515-fa094d34c872"
      },
      "source": [
        "fundings = orgs[[ 'num_funding_rounds', 'total_funding_usd',\r\n",
        "       'total_funding',]]\r\n",
        "fundings"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num_funding_rounds</th>\n",
              "      <th>total_funding_usd</th>\n",
              "      <th>total_funding</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.0</td>\n",
              "      <td>39750000.0</td>\n",
              "      <td>39750000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>6.0</td>\n",
              "      <td>49000000.0</td>\n",
              "      <td>49000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>800000.0</td>\n",
              "      <td>800000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>15000000.0</td>\n",
              "      <td>15000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9925</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9926</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9927</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9928</th>\n",
              "      <td>2.0</td>\n",
              "      <td>2450000.0</td>\n",
              "      <td>2450000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9929</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>9930 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      num_funding_rounds  total_funding_usd  total_funding\n",
              "0                    3.0         39750000.0     39750000.0\n",
              "1                    6.0         49000000.0     49000000.0\n",
              "2                    1.0           800000.0       800000.0\n",
              "3                    3.0         15000000.0     15000000.0\n",
              "4                    NaN                NaN            NaN\n",
              "...                  ...                ...            ...\n",
              "9925                 NaN                NaN            NaN\n",
              "9926                 NaN                NaN            NaN\n",
              "9927                 NaN                NaN            NaN\n",
              "9928                 2.0          2450000.0      2450000.0\n",
              "9929                 NaN                NaN            NaN\n",
              "\n",
              "[9930 rows x 3 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3_dpPwCqyL8l",
        "outputId": "bc07ad25-d2c8-469c-abc5-8ccfba99592c"
      },
      "source": [
        "fundings = fundings.dropna() # drop NA values\r\n",
        "\r\n",
        "# finding difference between 'total funding usd' and 'total funding'\r\n",
        "fundings['subtract']= fundings['total_funding_usd'] - fundings['total_funding']\r\n",
        "fundings['subtract'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              " 0.0           103391\n",
              " 10439.0          284\n",
              " 5998.0            95\n",
              " 11875.0           64\n",
              " 5926.0            60\n",
              "                ...  \n",
              " 3790425.0          1\n",
              " 21421.0            1\n",
              "-10967697.0         1\n",
              "-15162055.0         1\n",
              " 642426.0           1\n",
              "Name: subtract, Length: 34231, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "id": "jwotcWWhya5s",
        "outputId": "f82c9cd8-c37e-41e0-8998-9bbe98f703fd"
      },
      "source": [
        "# create a list of our conditions\r\n",
        "#l = {'pre-seed': 100000,'seed': 1000000, 'series A':100000-1000000, }\r\n",
        "conditions = [\r\n",
        "    (fundings['total_funding_usd'] <= 250000),\r\n",
        "    (fundings['total_funding_usd'] > 250000) & (fundings['total_funding_usd'] <= 1500000),\r\n",
        "    (fundings['total_funding_usd'] > 1500000) & (fundings['total_funding_usd'] <= 10000000),\r\n",
        "    (fundings['total_funding_usd'] > 10000000)\r\n",
        "    ]\r\n",
        "\r\n",
        "# create a list of the values we want to assign for each condition\r\n",
        "values = ['<250,000', '250,000-1,500,000', '1,500,000-10,000,000', '10,000,000-50,000,000']\r\n",
        "\r\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\r\n",
        "fundings['funding_group_usd'] = np.select(conditions, values)\r\n",
        "\r\n",
        "# see all the values for 'funding_group_usd'\r\n",
        "fundings['funding_group_usd'].value_counts()\r\n",
        "fundings['funding_group_usd'].hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f84c751da58>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xf7dOj570jqi"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "lWFovD8qzO3o",
        "outputId": "86a3d7a0-655b-4d28-d4ee-d32c62772935"
      },
      "source": [
        "# correlation matrix of fundings\r\n",
        "# seems like 'total_funding_usd' has low correlation with 'total_funding'\r\n",
        "\r\n",
        "fundings.corr()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>num_funding_rounds</th>\n",
              "      <th>total_funding_usd</th>\n",
              "      <th>total_funding</th>\n",
              "      <th>subtract</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>num_funding_rounds</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.114314</td>\n",
              "      <td>-0.001819</td>\n",
              "      <td>0.003899</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_funding_usd</th>\n",
              "      <td>0.114314</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.041153</td>\n",
              "      <td>-0.022989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_funding</th>\n",
              "      <td>-0.001819</td>\n",
              "      <td>0.041153</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.999835</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subtract</th>\n",
              "      <td>0.003899</td>\n",
              "      <td>-0.022989</td>\n",
              "      <td>-0.999835</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                    num_funding_rounds  ...  subtract\n",
              "num_funding_rounds            1.000000  ...  0.003899\n",
              "total_funding_usd             0.114314  ... -0.022989\n",
              "total_funding                -0.001819  ... -0.999835\n",
              "subtract                      0.003899  ...  1.000000\n",
              "\n",
              "[4 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 385
        },
        "id": "UYBwbZNJzTlm",
        "outputId": "a3d811d0-f772-49ca-b4a2-a7f17ae23a33"
      },
      "source": [
        "# create a list of our conditions for 'total_funding'\r\n",
        "conditions = [\r\n",
        "    (fundings['total_funding'] <= 300000),\r\n",
        "    (fundings['total_funding'] > 300000) & (fundings['total_funding'] <= 2000000),\r\n",
        "    (fundings['total_funding'] > 2000000) & (fundings['total_funding'] <= 10000000),\r\n",
        "    (fundings['total_funding'] > 10000000)\r\n",
        "    ]\r\n",
        "\r\n",
        "# create a list of the values we want to assign for each condition\r\n",
        "values = ['<250,000', '250,000-1,500,000', '1,500,000-10,000,000', '10,000,000-50,000,000']\r\n",
        "\r\n",
        "# create a new column and use np.select to assign values to it using our lists as arguments\r\n",
        "fundings['funding_group'] = np.select(conditions, values)\r\n",
        "\r\n",
        "# See all the values of 'funding_group'\r\n",
        "fundings['funding_group'].value_counts()\r\n",
        "fundings['funding_group'].hist()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  del sys.path[0]\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f84c746eef0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qAyo43KNcSFo"
      },
      "source": [
        "### Stratified Split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oLk3EdjoWxuZ"
      },
      "source": [
        "orgs.drop(['name','type','roles','index','uuid','address','permalink','cb_url','created_at','rank','updated_at','legal_name','postal_code','domain','homepage_url','num_funding_rounds','total_funding_usd','total_funding_currency_code','facebook_url','linkedin_url','twitter_url','alias1','alias2','alias3','primary_role','num_exits','logo_url','short_description','total_funding','founded_on','category_list','category_groups_list','last_funding_on','closed_on','employee_count','email','phone'],inplace=True,axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3k_6AynAcUvW"
      },
      "source": [
        "# Split that data so that status is balanced\n",
        "\n",
        "# Example:\n",
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
        "for train_index, test_index in split.split(orgs, orgs['status']):\n",
        "     strat_train_set = orgs.loc[train_index]\n",
        "     strat_test_set = orgs.loc[test_index]\n",
        "\n",
        "     \n",
        "data = strat_train_set.copy()\n",
        "data_labels = strat_train_set[\"status\"].copy()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ogPjTY7smfBX"
      },
      "source": [
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
        "for train_index, test_index in split.split(orgs, orgs['status']):\n",
        "     strat_train_set = orgs.loc[train_index]\n",
        "     strat_test_set = orgs.loc[test_index]\n",
        "\n",
        "     \n",
        "data = strat_train_set.copy()\n",
        "data_labels = strat_train_set[\"status\"].copy()\n",
        "\n",
        "data_cat=data[['country_code', 'state_code', 'region', 'city' ]]\n",
        "\n",
        "\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "data_num = data.select_dtypes(include=[np.number])\n",
        "num_pipeline = Pipeline([\n",
        "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
        "        ('std_scaler', StandardScaler()),\n",
        "    ])\n",
        "\n",
        "data_num_tr = num_pipeline.fit_transform(data_num)\n",
        "\n",
        "\n",
        "\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "data[data_cat.columns]=data[data_cat.columns].astype(str)\n",
        "num_attribs = list(data_num)\n",
        "cat_attribs = list(data_cat.columns)\n",
        "\n",
        "full_pipeline = ColumnTransformer([\n",
        "        (\"num\", num_pipeline, num_attribs),\n",
        "        (\"cat\", OneHotEncoder(handle_unknown='ignore'), cat_attribs),\n",
        "    ])\n",
        "\n",
        "data_prepared = full_pipeline.fit_transform(data)\n",
        "\n",
        "#Get the feature names\n",
        "from sklearn.feature_selection._base import SelectorMixin\n",
        "from sklearn.feature_extraction.text import _VectorizerMixin\n",
        "def get_feature_out(estimator, feature_in):\n",
        "    if hasattr(estimator,'get_feature_names'):\n",
        "        if isinstance(estimator, _VectorizerMixin):\n",
        "            # handling all vectorizers\n",
        "            return [f'vec_{f}' \\\n",
        "                for f in estimator.get_feature_names()]\n",
        "        else:\n",
        "            return estimator.get_feature_names(feature_in)\n",
        "    elif isinstance(estimator, SelectorMixin):\n",
        "        return np.array(feature_in)[estimator.get_support()]\n",
        "    else:\n",
        "        return feature_in\n",
        "\n",
        "\n",
        "def get_ct_feature_names(ct):\n",
        "    # handles all estimators, pipelines inside ColumnTransfomer\n",
        "    # doesn't work when remainder =='passthrough'\n",
        "    # which requires the input column names.\n",
        "    output_features = []\n",
        "\n",
        "    for name, estimator, features in ct.transformers_:\n",
        "        if name!='remainder':\n",
        "            if isinstance(estimator, Pipeline):\n",
        "                current_features = features\n",
        "                for step in estimator:\n",
        "                    current_features = get_feature_out(step, current_features)\n",
        "                features_out = current_features\n",
        "            else:\n",
        "                features_out = get_feature_out(estimator, features)\n",
        "            output_features.extend(features_out)\n",
        "        elif estimator=='passthrough':\n",
        "            output_features.extend(ct._feature_names_in[features])\n",
        "                \n",
        "    return output_features\n",
        "\n",
        "cols = get_ct_feature_names(full_pipeline)\n",
        "data_processed_columns=pd.DataFrame(data_prepared.toarray(), columns=get_ct_feature_names(full_pipeline))\n",
        "\n",
        "\n",
        "X_test = strat_test_set\n",
        "X_test[cat_attribs]=X_test[cat_attribs].astype(str)\n",
        "y_test = strat_test_set[\"status\"].copy()\n",
        "X_test=full_pipeline.transform(X_test)\n",
        "\n",
        "from collections import Counter\n",
        "from sklearn.datasets import make_classification\n",
        "from imblearn.combine import SMOTEENN \n",
        "#strategy = {'closed':round(len(data_prepared)*.5), 'acquired': round(len(data_prepared)*.1), 'ipo':round(len(data_prepared)*.1), 'operating':round(len(data_prepared)*.3)}\n",
        "sme = SMOTEENN(random_state=42)\n",
        "data_prepared_balanced, data_labels = sme.fit_resample(data_prepared.copy(), data_labels)\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d5NH-tVVXq6h"
      },
      "source": [
        "### Feature Selection"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 232
        },
        "id": "zUZyXWXnWEbQ",
        "outputId": "7059c23d-aae2-41e1-a293-752ca75642af"
      },
      "source": [
        "# Random Forest\n",
        "# Load libraries\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "# Run Random Forest\n",
        "rf = RandomForestClassifier(random_state=5, n_estimators=100)\n",
        "model = rf.fit(data_prepared,data_labels)\n",
        "# Using the model to predict the results based on the test dataset\n",
        "y_test_pred = model.predict(X_test)\n",
        "# Calculate the mean squared error of the prediction\n",
        "accuracy_ratio = accuracy_score(y_test, y_test_pred)\n",
        "print(accuracy_ratio)\n",
        "importance = model.feature_importances_\n",
        "importances_named=pd.DataFrame(rf.feature_importances_)\n",
        "importances_named.index=data_processed_columns.columns\n",
        "\n",
        "# summarize feature importance\n",
        "# for i,v in enumerate(importance):\n",
        "# \tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
        "\n",
        "\n",
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "def indices_of_top_k(arr, k):\n",
        "    return np.sort(np.argpartition(np.array(arr), -k)[-k:])\n",
        "\n",
        "class TopFeatureSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, feature_importances, k):\n",
        "        self.feature_importances = feature_importances\n",
        "        self.k = k\n",
        "    def fit(self, X, y=None):\n",
        "        self.feature_indices_ = indices_of_top_k(self.feature_importances, self.k)\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[:, self.feature_indices_],self.feature_indices_\n",
        "    \n",
        "k=30\n",
        "#top_k_feature_indices = indices_of_top_k(forest_reg.feature_importances_, 10)\n",
        "#Feature selection using top feature selector\n",
        "preparation_and_feature_selection_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(rf.feature_importances_, k))\n",
        "])\n",
        "\n",
        "data_prepared_top,indices = preparation_and_feature_selection_pipeline.fit_transform(data.copy())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-a3056bd32f75>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# Run Random Forest\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mrf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_prepared\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdata_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;31m# Using the model to predict the results based on the test dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0my_test_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'data_prepared' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Lb_MtlgmUUG"
      },
      "source": [
        "### XGBoost "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fnEuQMWDmWlZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ff289d2-1d2c-42a0-acd4-22237261d99c"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Counter({'acquired': 101281,\n",
              "         'closed': 38555,\n",
              "         'ipo': 31027,\n",
              "         'operating': 1024285})"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KmrF_kEOrizH"
      },
      "source": [
        "### CasualML"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "smkKvuwgrleL"
      },
      "source": [
        "### Semi-supervised Clustering ML\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gbY5NQ74vAUt",
        "outputId": "bae0aa46-eaba-4d52-d84c-2773fc077889"
      },
      "source": [
        "orgs.columns."
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['index', 'uuid', 'name', 'type', 'permalink', 'cb_url', 'rank',\n",
              "       'created_at', 'updated_at', 'legal_name', 'roles', 'domain',\n",
              "       'homepage_url', 'country_code', 'state_code', 'region', 'city',\n",
              "       'address', 'postal_code', 'status', 'short_description',\n",
              "       'category_list', 'category_groups_list', 'num_funding_rounds',\n",
              "       'total_funding_usd', 'total_funding', 'total_funding_currency_code',\n",
              "       'founded_on', 'last_funding_on', 'closed_on', 'employee_count', 'email',\n",
              "       'phone', 'facebook_url', 'linkedin_url', 'twitter_url', 'logo_url',\n",
              "       'alias1', 'alias2', 'alias3', 'primary_role', 'num_exits',\n",
              "       'Messaging and Telecommunications', 'Science and Engineering',\n",
              "       'Artificial Intelligence', 'Apps', 'Hardware', 'Payments',\n",
              "       'Content and Publishing', 'Real Estate', 'Manufacturing', 'Energy',\n",
              "       'Travel and Tourism', 'Data and Analytics', 'Natural Resources',\n",
              "       'Design', 'Administrative Services', 'Information Technology',\n",
              "       'Education', 'Sports', 'Music and Audio', 'Software', 'Gaming',\n",
              "       'Community and Lifestyle', 'Video', 'Transportation',\n",
              "       'Media and Entertainment', 'Privacy and Security', 'Sustainability',\n",
              "       'Commerce and Shopping', 'Government and Military', 'Health Care',\n",
              "       'Navigation and Mapping', 'Events', 'Food and Beverage',\n",
              "       'Biotechnology', 'Financial Services', 'Advertising',\n",
              "       'Clothing and Apparel', 'Other', 'Consumer Goods', 'Platforms',\n",
              "       'Consumer Electronics', 'Mobile', 'Professional Services',\n",
              "       'Lending and Investments', 'Sales and Marketing', 'Internet Services',\n",
              "       'founded_on_year', 'founded_on_month', 'founded_on_day'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gZwyg4XsX13-"
      },
      "source": [
        "#Feature selector\n",
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "def indices_of_top_k(arr, k):\n",
        "    return np.sort(np.argpartition(np.array(arr), -k)[-k:])\n",
        "\n",
        "class TopFeatureSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, feature_importances, k):\n",
        "        self.feature_importances = feature_importances\n",
        "        self.k = k\n",
        "    def fit(self, X, y=None):\n",
        "        self.feature_indices_ = indices_of_top_k(self.feature_importances, self.k)\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[:, self.feature_indices_]\n",
        "\n",
        "k = 5\n",
        "top_k_feature_indices = indices_of_top_k(feature_importances, k)\n",
        "top_k_feature_indices\n",
        "\n",
        "\n",
        "preparation_and_feature_selection_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(feature_importances, k))\n",
        "])\n",
        "\n",
        "data_prepared_top_k_features = preparation_and_feature_selection_pipeline.fit_transform(data)\n",
        "\n",
        "data_prepared[0:3, top_k_feature_indices]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_jkjtLJirqDt",
        "outputId": "ffab1ef6-edab-440d-b4a7-f65c348c8af7"
      },
      "source": [
        "#PCA it first or auto-encode\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "k = 50\n",
        "kmeans = KMeans(n_clusters=k)\n",
        "sample = data_prepared[0:50]\n",
        "sample_labels = data_labels[0:50]\n",
        "X_digits_dist = kmeans.fit_transform(sample)\n",
        "representative_digit_idx = np.argmin(X_digits_dist, axis=0)\n",
        "X_representative_digits = sample[representative_digit_idx]\n",
        "\n",
        "log_reg = LogisticRegression()\n",
        "log_reg.fit(X_representative_digits, sample_labels)\n",
        "log_reg.score(X_test,y_test)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.34196891191709844"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bGLBqfvYsf4P",
        "outputId": "bedc2206-59d7-4d65-c33c-a321d8371e68"
      },
      "source": [
        "log_reg.predict(X_representative_digits)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['operating', 'operating', 'operating', 'ipo', 'operating',\n",
              "       'operating', 'operating', 'operating', 'closed', 'operating',\n",
              "       'acquired', 'acquired', 'operating', 'closed', 'acquired',\n",
              "       'acquired', 'operating', 'operating', 'operating', 'acquired',\n",
              "       'operating', 'operating', 'operating', 'operating', 'acquired',\n",
              "       'acquired', 'operating', 'operating', 'closed', 'acquired',\n",
              "       'operating', 'ipo', 'acquired', 'closed', 'closed', 'operating',\n",
              "       'acquired', 'acquired', 'closed', 'closed', 'operating',\n",
              "       'operating', 'closed', 'closed', 'operating', 'operating',\n",
              "       'acquired', 'closed', 'operating', 'acquired'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    }
  ]
}